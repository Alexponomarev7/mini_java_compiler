class Test {
    public static void main() {
	    assert(true);

	    int test;
        test = 1;

        if (true) {

        }


	    NewType1 t;
	    t = new NewType1();

        int a;
        a = 2;
        int b;
        b = 3;

        bool check;
        check = true;

        int sum_ab;
        sum_ab = t.add(a, b);
        System.out.println(sum_ab);

        int result;
        result = 1 + 2;

	    result = t.get();

        bool flag;
        flag = true;

        int start;
        start = 1;

        if (result == 4) {
            System.out.println(111);
        } else {
            System.out.println(111);
        }


        while (start < 5) {
    	    start = start + 1;
        }

        while (start < 10)
            start = start + 1;

    	System.out.println(start);
    	System.out.println(result);

        NewType2 t2;
        t2 = new NewType2();

        int out;
        out = t2.get();

        System.out.println(out);

        NewType3 t3;
        t3 = new NewType3();



        GCD gcd;
        gcd = new GCD();

        int ga;
        int gb;

        ga = 10;
        gb = 5;
        int gcd_res;
        gcd_res = gcd.eval(ga, gb);
        System.out.println(gcd_res);
    }
}

class NewType1 {
	public int get() {
	    int y;
	    y = 4;
        return y;
	}

	public int add(int x, int y) {
	    return x + y;
	}
}

class NewType2 {
    int x;

    public int init() {
        return 19;
    }

    public int get() {
        int result;
        result = this.init();
        return result;
    }
}

class NewType3 {
    int x;

    public void set(int y) {
        x = y;
    }

    public void inc() {
        x = x + 1;
    }

    public int get() {
        return x;
    }
}

class GCD {
    public int eval(int a, int b) {
        if (a < b) {
            int swap;
            swap = a;
            a = b;
            b = swap;
        }

        if (b == 0) {
            return a;
        }

        int result;
        int new_a;

        new_a = b;

        int new_b;
        new_b = a - b;

        result = this.eval(new_a, new_b);
        return result;
    }
}